ltfrom flask import Flask, request
import requests
import os
import json
from threading import Lock

app = Flask(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
USERS_FILE = "users.json"
users_lock = Lock()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    requests.post(url, json=payload)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(user_ids):
    with open(USERS_FILE, "w") as f:
        json.dump(user_ids, f)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_user(user_id):
    with users_lock:
        user_ids = load_users()
        if user_id not in user_ids:
            user_ids.append(user_id)
            save_users(user_ids)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º
def broadcast_message(text):
    user_ids = load_users()
    for user_id in user_ids:
        send_message(user_id, text)

@app.route("/", methods=["GET"])
def home():
    return "Bot is running!", 200

# Telegram webhook
@app.route(f"/bot{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.json

    if not data or "message" not in data:
        return "No message", 400

    message = data["message"]
    chat_id = message["chat"]["id"]
    text = message.get("text", "")

    register_user(chat_id)

    if text == "/start":
        welcome = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Aspro.\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
            "‚ÑπÔ∏è –ï—Å–ª–∏ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–ø–∏—Å–∞–ª /start."
        )
        send_message(chat_id, welcome)

    return "OK", 200

# Aspro webhook
@app.route("/aspro-webhook", methods=["POST"])
def handle_webhook():
    data = request.json
    if not data:
        return "No data", 400

    task_name = data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    project = data.get("project_name", "–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞")
    responsible = data.get("responsible_name", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
    url = data.get("link", "https://pirus.aspro.cloud/")

    message = f"üìå <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤ Aspro</b>\n" \
              f"üìÇ –ü—Ä–æ–µ–∫—Ç: {project}\n" \
              f"üìù –ó–∞–¥–∞—á–∞: {task_name}\n" \
              f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible}\n" \
              f"üîó <a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É</a>"

    broadcast_message(message)
    return "OK", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
